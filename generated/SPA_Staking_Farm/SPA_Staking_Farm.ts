// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardFrozen extends ethereum.Event {
  get params(): RewardFrozen__Params {
    return new RewardFrozen__Params(this);
  }
}

export class RewardFrozen__Params {
  _event: RewardFrozen;

  constructor(event: RewardFrozen) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalStakedSPA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingEnabled extends ethereum.Event {
  get params(): StakingEnabled__Params {
    return new StakingEnabled__Params(this);
  }
}

export class StakingEnabled__Params {
  _event: StakingEnabled;

  constructor(event: StakingEnabled) {
    this._event = event;
  }

  get status(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalStakedSPA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawnWithPenalty extends ethereum.Event {
  get params(): WithdrawnWithPenalty__Params {
    return new WithdrawnWithPenalty__Params(this);
  }
}

export class WithdrawnWithPenalty__Params {
  _event: WithdrawnWithPenalty;

  constructor(event: WithdrawnWithPenalty) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalStakedSPA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SPA_Staking_Farm__getDepositsResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get liability(): BigInt {
    return this[1].toBigInt();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get expiryTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class SPA_Staking_Farm extends ethereum.SmartContract {
  static bind(address: Address): SPA_Staking_Farm {
    return new SPA_Staking_Farm("SPA_Staking_Farm", address);
  }

  BASE_APR(): BigInt {
    let result = super.call("BASE_APR", "BASE_APR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_APR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_APR", "BASE_APR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SPA(): Address {
    let result = super.call("SPA", "SPA():(address)", []);

    return result[0].toAddress();
  }

  try_SPA(): ethereum.CallResult<Address> {
    let result = super.tryCall("SPA", "SPA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowStaking(): boolean {
    let result = super.call("allowStaking", "allowStaking():(bool)", []);

    return result[0].toBoolean();
  }

  try_allowStaking(): ethereum.CallResult<boolean> {
    let result = super.tryCall("allowStaking", "allowStaking():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  endTime(): BigInt {
    let result = super.call("endTime", "endTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endTime", "endTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeposits(
    account: Address,
    index: BigInt
  ): SPA_Staking_Farm__getDepositsResultValue0Struct {
    let result = super.call(
      "getDeposits",
      "getDeposits(address,uint256):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return changetype<SPA_Staking_Farm__getDepositsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDeposits(
    account: Address,
    index: BigInt
  ): ethereum.CallResult<SPA_Staking_Farm__getDepositsResultValue0Struct> {
    let result = super.tryCall(
      "getDeposits",
      "getDeposits(address,uint256):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SPA_Staking_Farm__getDepositsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getLiability(
    deposit: BigInt,
    multiplier: BigInt,
    lockupPeriod: BigInt
  ): BigInt {
    let result = super.call(
      "getLiability",
      "getLiability(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(deposit),
        ethereum.Value.fromUnsignedBigInt(multiplier),
        ethereum.Value.fromUnsignedBigInt(lockupPeriod)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLiability(
    deposit: BigInt,
    multiplier: BigInt,
    lockupPeriod: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiability",
      "getLiability(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(deposit),
        ethereum.Value.fromUnsignedBigInt(multiplier),
        ethereum.Value.fromUnsignedBigInt(lockupPeriod)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumDeposits(account: Address): BigInt {
    let result = super.call(
      "getNumDeposits",
      "getNumDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getNumDeposits(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumDeposits",
      "getNumDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isRewardFrozen(param0: Address): boolean {
    let result = super.call(
      "isRewardFrozen",
      "isRewardFrozen(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isRewardFrozen(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRewardFrozen",
      "isRewardFrozen(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockupPeriods(param0: BigInt): BigInt {
    let result = super.call(
      "lockupPeriods",
      "lockupPeriods(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lockupPeriods(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockupPeriods",
      "lockupPeriods(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multipliers(param0: BigInt): BigInt {
    let result = super.call("multipliers", "multipliers(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_multipliers(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "multipliers",
      "multipliers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardAccount(): Address {
    let result = super.call("rewardAccount", "rewardAccount():(address)", []);

    return result[0].toAddress();
  }

  try_rewardAccount(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardAccount",
      "rewardAccount():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStakedSPA(): BigInt {
    let result = super.call("totalStakedSPA", "totalStakedSPA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStakedSPA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedSPA",
      "totalStakedSPA():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SPA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardFrozenCall extends ethereum.Call {
  get inputs(): SetRewardFrozenCall__Inputs {
    return new SetRewardFrozenCall__Inputs(this);
  }

  get outputs(): SetRewardFrozenCall__Outputs {
    return new SetRewardFrozenCall__Outputs(this);
  }
}

export class SetRewardFrozenCall__Inputs {
  _call: SetRewardFrozenCall;

  constructor(call: SetRewardFrozenCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRewardFrozenCall__Outputs {
  _call: SetRewardFrozenCall;

  constructor(call: SetRewardFrozenCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lockPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class ToggleStakingCall extends ethereum.Call {
  get inputs(): ToggleStakingCall__Inputs {
    return new ToggleStakingCall__Inputs(this);
  }

  get outputs(): ToggleStakingCall__Outputs {
    return new ToggleStakingCall__Outputs(this);
  }
}

export class ToggleStakingCall__Inputs {
  _call: ToggleStakingCall;

  constructor(call: ToggleStakingCall) {
    this._call = call;
  }
}

export class ToggleStakingCall__Outputs {
  _call: ToggleStakingCall;

  constructor(call: ToggleStakingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
