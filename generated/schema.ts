// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class spaL2TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("vestingReward", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save spaL2TransferEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save spaL2TransferEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("spaL2TransferEvent", id.toString(), this);
    }
  }

  static load(id: string): spaL2TransferEvent | null {
    return changetype<spaL2TransferEvent | null>(
      store.get("spaL2TransferEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get vestingReward(): BigDecimal {
    let value = this.get("vestingReward");
    return value!.toBigDecimal();
  }

  set vestingReward(value: BigDecimal) {
    this.set("vestingReward", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class spaL2Balance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set(
      "bootstrapLiquidityDeployer",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("usdsUsdcFarmRewarder", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("usdsUsdcFarmVesting", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmRewarder1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmVesting1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmRewarder2", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmVesting2", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaReserveL2MultiSig", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaFarm", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaFarmRewarder", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalBalances", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save spaL2Balance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save spaL2Balance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("spaL2Balance", id.toString(), this);
    }
  }

  static load(id: string): spaL2Balance | null {
    return changetype<spaL2Balance | null>(store.get("spaL2Balance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bootstrapLiquidityDeployer(): BigDecimal {
    let value = this.get("bootstrapLiquidityDeployer");
    return value!.toBigDecimal();
  }

  set bootstrapLiquidityDeployer(value: BigDecimal) {
    this.set("bootstrapLiquidityDeployer", Value.fromBigDecimal(value));
  }

  get usdsUsdcFarmRewarder(): BigDecimal {
    let value = this.get("usdsUsdcFarmRewarder");
    return value!.toBigDecimal();
  }

  set usdsUsdcFarmRewarder(value: BigDecimal) {
    this.set("usdsUsdcFarmRewarder", Value.fromBigDecimal(value));
  }

  get usdsUsdcFarmVesting(): BigDecimal {
    let value = this.get("usdsUsdcFarmVesting");
    return value!.toBigDecimal();
  }

  set usdsUsdcFarmVesting(value: BigDecimal) {
    this.set("usdsUsdcFarmVesting", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmRewarder1(): BigDecimal {
    let value = this.get("spaUsdsFarmRewarder1");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmRewarder1(value: BigDecimal) {
    this.set("spaUsdsFarmRewarder1", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmVesting1(): BigDecimal {
    let value = this.get("spaUsdsFarmVesting1");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmVesting1(value: BigDecimal) {
    this.set("spaUsdsFarmVesting1", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmRewarder2(): BigDecimal {
    let value = this.get("spaUsdsFarmRewarder2");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmRewarder2(value: BigDecimal) {
    this.set("spaUsdsFarmRewarder2", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmVesting2(): BigDecimal {
    let value = this.get("spaUsdsFarmVesting2");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmVesting2(value: BigDecimal) {
    this.set("spaUsdsFarmVesting2", Value.fromBigDecimal(value));
  }

  get spaReserveL2MultiSig(): BigDecimal {
    let value = this.get("spaReserveL2MultiSig");
    return value!.toBigDecimal();
  }

  set spaReserveL2MultiSig(value: BigDecimal) {
    this.set("spaReserveL2MultiSig", Value.fromBigDecimal(value));
  }

  get spaFarm(): BigDecimal {
    let value = this.get("spaFarm");
    return value!.toBigDecimal();
  }

  set spaFarm(value: BigDecimal) {
    this.set("spaFarm", Value.fromBigDecimal(value));
  }

  get spaFarmRewarder(): BigDecimal {
    let value = this.get("spaFarmRewarder");
    return value!.toBigDecimal();
  }

  set spaFarmRewarder(value: BigDecimal) {
    this.set("spaFarmRewarder", Value.fromBigDecimal(value));
  }

  get totalBalances(): BigDecimal {
    let value = this.get("totalBalances");
    return value!.toBigDecimal();
  }

  set totalBalances(value: BigDecimal) {
    this.set("totalBalances", Value.fromBigDecimal(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class spaL2DayBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set(
      "bootstrapLiquidityDeployer",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("usdsUsdcFarmRewarder", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("usdsUsdcFarmVesting", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmRewarder1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmVesting1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmRewarder2", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaUsdsFarmVesting2", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaReserveL2MultiSig", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaFarm", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("spaFarmRewarder", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalBalances", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save spaL2DayBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save spaL2DayBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("spaL2DayBalance", id.toString(), this);
    }
  }

  static load(id: string): spaL2DayBalance | null {
    return changetype<spaL2DayBalance | null>(store.get("spaL2DayBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bootstrapLiquidityDeployer(): BigDecimal {
    let value = this.get("bootstrapLiquidityDeployer");
    return value!.toBigDecimal();
  }

  set bootstrapLiquidityDeployer(value: BigDecimal) {
    this.set("bootstrapLiquidityDeployer", Value.fromBigDecimal(value));
  }

  get usdsUsdcFarmRewarder(): BigDecimal {
    let value = this.get("usdsUsdcFarmRewarder");
    return value!.toBigDecimal();
  }

  set usdsUsdcFarmRewarder(value: BigDecimal) {
    this.set("usdsUsdcFarmRewarder", Value.fromBigDecimal(value));
  }

  get usdsUsdcFarmVesting(): BigDecimal {
    let value = this.get("usdsUsdcFarmVesting");
    return value!.toBigDecimal();
  }

  set usdsUsdcFarmVesting(value: BigDecimal) {
    this.set("usdsUsdcFarmVesting", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmRewarder1(): BigDecimal {
    let value = this.get("spaUsdsFarmRewarder1");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmRewarder1(value: BigDecimal) {
    this.set("spaUsdsFarmRewarder1", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmVesting1(): BigDecimal {
    let value = this.get("spaUsdsFarmVesting1");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmVesting1(value: BigDecimal) {
    this.set("spaUsdsFarmVesting1", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmRewarder2(): BigDecimal {
    let value = this.get("spaUsdsFarmRewarder2");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmRewarder2(value: BigDecimal) {
    this.set("spaUsdsFarmRewarder2", Value.fromBigDecimal(value));
  }

  get spaUsdsFarmVesting2(): BigDecimal {
    let value = this.get("spaUsdsFarmVesting2");
    return value!.toBigDecimal();
  }

  set spaUsdsFarmVesting2(value: BigDecimal) {
    this.set("spaUsdsFarmVesting2", Value.fromBigDecimal(value));
  }

  get spaReserveL2MultiSig(): BigDecimal {
    let value = this.get("spaReserveL2MultiSig");
    return value!.toBigDecimal();
  }

  set spaReserveL2MultiSig(value: BigDecimal) {
    this.set("spaReserveL2MultiSig", Value.fromBigDecimal(value));
  }

  get spaFarm(): BigDecimal {
    let value = this.get("spaFarm");
    return value!.toBigDecimal();
  }

  set spaFarm(value: BigDecimal) {
    this.set("spaFarm", Value.fromBigDecimal(value));
  }

  get spaFarmRewarder(): BigDecimal {
    let value = this.get("spaFarmRewarder");
    return value!.toBigDecimal();
  }

  set spaFarmRewarder(value: BigDecimal) {
    this.set("spaFarmRewarder", Value.fromBigDecimal(value));
  }

  get totalBalances(): BigDecimal {
    let value = this.get("totalBalances");
    return value!.toBigDecimal();
  }

  set totalBalances(value: BigDecimal) {
    this.set("totalBalances", Value.fromBigDecimal(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class spaL2TotalSupplyDayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save spaL2TotalSupplyDayEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save spaL2TotalSupplyDayEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("spaL2TotalSupplyDayEvent", id.toString(), this);
    }
  }

  static load(id: string): spaL2TotalSupplyDayEvent | null {
    return changetype<spaL2TotalSupplyDayEvent | null>(
      store.get("spaL2TotalSupplyDayEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
